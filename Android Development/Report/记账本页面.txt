package com.example.lenovo.alipaylau;

import android.content.ContentValues;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.List;


public class countmoney extends ActionBarActivity {
    private List<Resource> tfList=new ArrayList<>();
    private ListView list;
    MyAdapter adapter;
    private ImageView ImageV;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_countmoney);
        list=(ListView) findViewById(R.id.lv_list2);
        ImageV=(ImageView) findViewById(R.id.imageView36);
        //1.创建数据库
        MySQLiteOpenHelper dbHelper = new MySQLiteOpenHelper(this,"test_carson");
        //数据库实际上是没有被创建或者打开的，直到getWritableDatabase() 或者 getReadableDatabase() 方法中的一个被调用时才会进行创建或者打开
        SQLiteDatabase  sqliteDatabase = dbHelper.getWritableDatabase();

        //2.下面添加由SQLite传来的方法
        // 创建DatabaseHelper对象
        MySQLiteOpenHelper dbHelper4 = new MySQLiteOpenHelper(countmoney.this,"test_carson",2);
        // 调用getWritableDatabase()方法创建或打开一个可以读的数据库
        SQLiteDatabase sqliteDatabase4 = dbHelper4.getReadableDatabase();

        // 调用SQLiteDatabase对象的query方法进行查询
        // 返回一个Cursor对象：由数据库查询返回的结果集对象
        Cursor cursor = sqliteDatabase4.query("user", new String[] { "id",
                "name" }, "id=?", new String[] { "1" }, null, null, null);


        String id = null;
        String name = null;

        //将光标移动到下一行，从而判断该结果集是否还有下一条数据
        //如果有则返回true，没有则返回false
        while (cursor.moveToNext()) {
            id = cursor.getString(cursor.getColumnIndex("id"));
            name = cursor.getString(cursor.getColumnIndex("name")); //这里获取到了两个数据
            //输出查询结果
            tfList.add(new Resource(Integer.parseInt(id),name));
        }
        //关闭数据库
        sqliteDatabase4.close();
        adapter=new MyAdapter();
        list.setAdapter(adapter);
        list.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {

            @Override
            public boolean onItemLongClick(AdapterView<?> arg0, View arg1,
                                           int arg2, long arg3) {
                // TODO Auto-generated method stub
                adapter.setMyadapterlength(arg2);
                return true;
            }
        });
        ImageV.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                    Intent intent = new Intent(countmoney.this, insertDeal.class);
                    startActivity(intent);
                }

        });
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_countmoney, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    class MyAdapter extends BaseAdapter {

//        private int myadapterlength=tfList.size();

        public void setMyadapterlength(int index) {
            if(tfList.size()>0) {
                tfList.remove(index);
                notifyDataSetChanged();
            }
        }

        //        private int i=1;
        //这个方法是最开始被调用的，用来计算到底有多少个item需要显示在lv上
        //得到Item的总数
        @Override
        public int getCount() {
            //返回ListView Item条目的总数
//            System.out.println("getCount");
            return tfList.size();
        }

        @Override
        public Object getItem(int position) {
            // 返回ListView Item代表的对象
//            System.out.println("getItem");
//            return appName[position];
            return tfList.get(position).kind;
        }


        @Override
        public long getItemId(int position) {
            // 返回ListView Item条目的Id
//            System.out.println("getItemId");
            return position;
        }

        @Override
        public View getView(int position, View contentView, ViewGroup parent) {

//            System.out.println(i+"=====");
//            i++;
            View view = View.inflate(countmoney.this, R.layout.list_item, null);
            TextView mTvName = (TextView) view.findViewById(R.id.listcontent1);
            mTvName.setText(tfList.get(position).kind);
            TextView mIvimage = (TextView) view.findViewById(R.id.tv_name);
            mIvimage.setText(tfList.get(position).price);

            return view;
        }
    }
}
